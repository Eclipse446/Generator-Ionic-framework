<#@ include file="..\..\Base\Templates\Include.tt" #>
/*
 * You should add your licence here, here is an example :
 *
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
<#
    if (_entity != null)
    {
        if (_entity.Extends != null)
        {
#>
import { <#= _entity.Extends.ToPascalCase() #>Model } from './<#= _entity.Extends.ToCamelCase() #>Model';
<#
        }

        List<string> alreadyImported = new List<string>();
        if (_constructorParametersObj.AsEnumerable() != null)
        {
            foreach (PropertyInfo property in _constructorParametersObj.AsEnumerable())
            {
                if (property.Target != null && property.Type != null && !alreadyImported.AsEnumerable().Contains(property.Type))
                {
                    alreadyImported.Add(property.Type);
                    if (property.Target.IsEnum)
                    {
#>
import { <#= property.Type.ToPascalCase() #>Enum } from './<#= property.Type.ToCamelCase() #>Enum';
<#
                    }
                    else
                    {
#>
import { <#= property.Type.ToPascalCase() #>Model } from './<#= property.Type.ToCamelCase() #>Model';
<#
                    }
                }
            }
        }

        if (_entity.References.AsEnumerable() != null)
        {
            foreach (ReferenceInfo reference in _entity.References.AsEnumerable())
            {
                if (reference.Target != null && reference.Type != null && !alreadyImported.AsEnumerable().Contains(reference.Type))
                {
                    alreadyImported.Add(reference.Type);
                    if (reference.Target.IsEnum)
                    {
#>
import { <#= reference.Type.ToPascalCase() #>Enum } from './<#= reference.Type.ToCamelCase() #>Enum';
<#
                    }
                    else
                    {
#>
import { <#= reference.Type.ToPascalCase() #>Model } from './<#= reference.Type.ToCamelCase() #>Model';
<#
                    }
                }
            }
        }

        if (_entity.Id != null)
        {
#>
/**
 * class: <#= _entity.Id.ToPascalCase() #>.
 * You should add a description of your entity here.
 * This model is a reference used in viewModels or
 * in another referenced model.
 * This model is generated from DataModel domain.
 */
export <# if (_entity.IsAbstract) {#>abstract <#}#>class <#= _entity.Id.ToPascalCase() #>Model<# if (_entity.Extends != null) {#> extends <#= _entity.Extends.ToPascalCase() #>Model<#}#> {
<# 
            if (_entity.Properties.AsEnumerable() != null)
            {
                foreach (PropertyInfo property in _entity.Properties.AsEnumerable())
                {
                    if (property.Id != null && property.TypeScriptType() != null && property.IsCollection)
                    {
#>
  /**
   * property.
   * isCollection.
   */
  public <#= property.Id.ToCamelCase() #>: <#= property.TypeScriptType() #>[];
<#
                    }
                    else if (property.Id != null && property.TypeScriptType() != null)
                    {
#>
  /**
   * property.
   */
  public <#= property.Id.ToCamelCase() #>: <#= property.TypeScriptType() #>;
<#
                    }
                }
            }

            if (_entity.References.AsEnumerable() != null)
            {
                foreach (ReferenceInfo reference in _entity.References.AsEnumerable())
                {
                    if (reference.Id != null && reference.Target != null && reference.Target.IsEnum)
                    {
#>
  /**
   * reference.
   * isEnum.
   */
  public <#= reference.Id.ToCamelCase() #>: <#= reference.TypeScriptType().ToPascalCase() #>Enum;
<#
                    }
                    else if (reference.Id != null && reference.TypeScriptType() != null && reference.IsCollection)
                    {
#>
  /**
   * reference.
   * isCollection.
   */
  public <#= reference.Id.ToCamelCase() #>: <#= reference.TypeScriptType().ToPascalCase() #>Model[];
<#
                    }
                    else if (reference.Id != null && reference.TypeScriptType() != null)
                    {
#>
  /**
   * reference.
   */
  public <#= reference.Id.ToCamelCase() #>: <#= reference.TypeScriptType().ToPascalCase() #>Model;
<#
                    }
                }
            }
#>
  constructor(
<#
            if (_constructorParametersObj.AsEnumerable() != null && _constructorParametersObj.AsEnumerable().Count() > 0)
            {
                int lastIndex = _constructorParametersObj.AsEnumerable().Count() - 1;
                int index = 0;
                Dictionary<string, int> countConstructor = new Dictionary<string, int>();
                foreach (PropertyInfo property in _constructorParametersObj.AsEnumerable())
                {
                    if (property.Id != null && property.TypeScriptType() != null)
                    {
                        string propertyIsModel = IsModelOrEnum(property);
                        if (!countConstructor.ContainsKey(property.Id))
                            countConstructor.Add(property.Id, 1);
                        else
                            countConstructor[property.Id] = countConstructor[property.Id] + 1;
                        string type =  property.TypeScriptType();
                        if (!propertyIsModel.Equals(""))
                        {
                            type = type.ToPascalCase();
                        }
                        if (property.IsCollection && index == lastIndex)
                        {
#>
    <#= property.Id.ToCamelCase() + countConstructor[property.Id] #>: <#= type + propertyIsModel #>[]
<#
                        }
                        else if (index == lastIndex)
                        {
#>
    <#= property.Id.ToCamelCase() + countConstructor[property.Id] #>: <#= type + propertyIsModel #>
<#
                        }
                        else if (property.IsCollection)
                        {
#>
    <#= property.Id.ToCamelCase() + countConstructor[property.Id] #>: <#= type + propertyIsModel #>[],
<#
                        }
                        else
                        {
#>
    <#= property.Id.ToCamelCase() + countConstructor[property.Id] #>: <#= type + propertyIsModel #>,
<#
                        }
                    }
                    index++;
                }
            }
#>
  ) {
<#
            Dictionary<string, int> countObj = new Dictionary<string, int>();
            if (_superPropertiesObj.AsEnumerable() != null && _superPropertiesObj.AsEnumerable().Count() > 0)
            {
#>
    super(
<#
                int lastIndex = _superPropertiesObj.AsEnumerable().Count() - 1;
                int index = 0;
                
                foreach (PropertyInfo property in _superPropertiesObj.AsEnumerable())
                {
                    if (property.Id != null)
                    {
                        if (!countObj.ContainsKey(property.Id))
                            countObj.Add(property.Id, 1);
                        else
                            countObj[property.Id] = countObj[property.Id] + 1;
                        if (index == lastIndex)
                        {
#>
      <#= property.Id.ToCamelCase() + countObj[property.Id] #>
<#
                        }
                        else
                        {
#>
      <#= property.Id.ToCamelCase() + countObj[property.Id] #>,
<#
                        }
                    }
                    index++;
                }
#>
    );
<#
            }

            if (_entity.Properties.AsEnumerable() != null)
            {
                foreach (PropertyInfo property in _entity.Properties.AsEnumerable())
                {
                    if (property.Id != null)
                    {
                        if (!countObj.ContainsKey(property.Id))
                            countObj.Add(property.Id, 1);
                        else
                            countObj[property.Id] = countObj[property.Id] + 1;
#>
    this.<#= property.Id.ToCamelCase() #> = <#= property.Id.ToCamelCase() + countObj[property.Id] #>;
<#
                    }
                }
            }

            if (_entity.References.AsEnumerable() != null)
            {
                foreach (ReferenceInfo reference in _entity.References.AsEnumerable())
                {
                    if (reference.Id != null)
                    {
                        if (!countObj.ContainsKey(reference.Id))
                            countObj.Add(reference.Id, 1);
                        else
                            countObj[reference.Id] = countObj[reference.Id] + 1;
#>
    this.<#= reference.Id.ToCamelCase() #> = <#= reference.Id.ToCamelCase() + countObj[reference.Id] #>;
<#
                    }
                }
            }
#>
  }
}
<#
        }
    }
#>
