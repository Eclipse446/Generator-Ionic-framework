// ------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime : 15.0.0.0
//  
//     Les changements apportés à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace GeneratorProject.Platforms.Frontend.Ionic
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Mobioos.Scaffold.TextTemplating;
    using Mobioos.Foundation.Jade.Models;
    using Mobioos.Foundation.Jade.Extensions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class DataModelTemplate : TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\r\n");
            this.Write(@"/*
 * You should add your licence here, here is an example :
 *
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
");
            
            #line 24 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

    if (_entity != null)
    {
        if (_entity.Extends != null)
        {

            
            #line default
            #line hidden
            this.Write("import { ");
            
            #line 30 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PascalCase(_entity.Extends)));
            
            #line default
            #line hidden
            this.Write("Model } from \'./");
            
            #line 30 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(_entity.Extends)));
            
            #line default
            #line hidden
            this.Write("Model\';\r\n");
            
            #line 31 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

        }

        List<string> alreadyImported = new List<string>();
        if (_constructorParametersObj.AsEnumerable() != null)
        {
            foreach (PropertyInfo property in _constructorParametersObj.AsEnumerable())
            {
                if (property.Target != null && property.Type != null && !alreadyImported.AsEnumerable().Contains(property.Type))
                {
                    alreadyImported.Add(property.Type);
                    if (property.Target.IsEnum)
                    {

            
            #line default
            #line hidden
            this.Write("import { ");
            
            #line 45 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PascalCase(property.Type)));
            
            #line default
            #line hidden
            this.Write("Enum } from \'./");
            
            #line 45 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(property.Type)));
            
            #line default
            #line hidden
            this.Write("Enum\';\r\n");
            
            #line 46 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                    }
                    else
                    {

            
            #line default
            #line hidden
            this.Write("import { ");
            
            #line 51 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PascalCase(property.Type)));
            
            #line default
            #line hidden
            this.Write("Model } from \'./");
            
            #line 51 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(property.Type)));
            
            #line default
            #line hidden
            this.Write("Model\';\r\n");
            
            #line 52 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                    }
                }
            }
        }

        if (_entity.References.AsEnumerable() != null)
        {
            foreach (ReferenceInfo reference in _entity.References.AsEnumerable())
            {
                if (reference.Target != null && reference.Type != null && !alreadyImported.AsEnumerable().Contains(reference.Type))
                {
                    alreadyImported.Add(reference.Type);
                    if (reference.Target.IsEnum)
                    {

            
            #line default
            #line hidden
            this.Write("import { ");
            
            #line 68 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PascalCase(reference.Type)));
            
            #line default
            #line hidden
            this.Write("Enum } from \'./");
            
            #line 68 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(reference.Type)));
            
            #line default
            #line hidden
            this.Write("Enum\';\r\n");
            
            #line 69 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                    }
                    else
                    {

            
            #line default
            #line hidden
            this.Write("import { ");
            
            #line 74 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PascalCase(reference.Type)));
            
            #line default
            #line hidden
            this.Write("Model } from \'./");
            
            #line 74 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(reference.Type)));
            
            #line default
            #line hidden
            this.Write("Model\';\r\n");
            
            #line 75 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                    }
                }
            }
        }

        if (_entity.Id != null)
        {

            
            #line default
            #line hidden
            this.Write("/**\r\n * class: ");
            
            #line 85 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PascalCase(_entity.Id)));
            
            #line default
            #line hidden
            this.Write(".\r\n * You should add a description of your entity here.\r\n * This model is a refer" +
                    "ence used in viewModels or\r\n * in another referenced model.\r\n * This model is ge" +
                    "nerated from DataModel domain.\r\n */\r\nexport ");
            
            #line 91 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
 if (_entity.IsAbstract) {
            
            #line default
            #line hidden
            this.Write("abstract ");
            
            #line 91 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("class ");
            
            #line 91 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PascalCase(_entity.Id)));
            
            #line default
            #line hidden
            this.Write("Model");
            
            #line 91 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
 if (_entity.Extends != null) {
            
            #line default
            #line hidden
            this.Write(" extends ");
            
            #line 91 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PascalCase(_entity.Extends)));
            
            #line default
            #line hidden
            this.Write("Model");
            
            #line 91 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write(" {\r\n");
            
            #line 92 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
 
            if (_entity.Properties.AsEnumerable() != null)
            {
                foreach (PropertyInfo property in _entity.Properties.AsEnumerable())
                {
                    if (property.Id != null && property.TypeScriptType() != null && property.IsCollection)
                    {

            
            #line default
            #line hidden
            this.Write("  /**\r\n   * property.\r\n   * isCollection.\r\n   */\r\n  public ");
            
            #line 104 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(property.Id)));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 104 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.TypeScriptType()));
            
            #line default
            #line hidden
            this.Write("[];\r\n");
            
            #line 105 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                    }
                    else if (property.Id != null && property.TypeScriptType() != null)
                    {

            
            #line default
            #line hidden
            this.Write("  /**\r\n   * property.\r\n   */\r\n  public ");
            
            #line 113 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(property.Id)));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 113 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.TypeScriptType()));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 114 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                    }
                }
            }

            if (_entity.References.AsEnumerable() != null)
            {
                foreach (ReferenceInfo reference in _entity.References.AsEnumerable())
                {
                    if (reference.Id != null && reference.Target != null && reference.Target.IsEnum)
                    {

            
            #line default
            #line hidden
            this.Write("  /**\r\n   * reference.\r\n   * isEnum.\r\n   */\r\n  public ");
            
            #line 130 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(reference.Id)));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 130 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PascalCase(reference.TypeScriptType())));
            
            #line default
            #line hidden
            this.Write("Enum;\r\n");
            
            #line 131 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                    }
                    else if (reference.Id != null && reference.TypeScriptType() != null && reference.IsCollection)
                    {

            
            #line default
            #line hidden
            this.Write("  /**\r\n   * reference.\r\n   * isCollection.\r\n   */\r\n  public ");
            
            #line 140 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(reference.Id)));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 140 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PascalCase(reference.TypeScriptType())));
            
            #line default
            #line hidden
            this.Write("Model[];\r\n");
            
            #line 141 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                    }
                    else if (reference.Id != null && reference.TypeScriptType() != null)
                    {

            
            #line default
            #line hidden
            this.Write("  /**\r\n   * reference.\r\n   */\r\n  public ");
            
            #line 149 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(reference.Id)));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 149 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PascalCase(reference.TypeScriptType())));
            
            #line default
            #line hidden
            this.Write("Model;\r\n");
            
            #line 150 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                    }
                }
            }

            
            #line default
            #line hidden
            this.Write("  constructor(\r\n");
            
            #line 156 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

            if (_constructorParametersObj.AsEnumerable() != null && _constructorParametersObj.AsEnumerable().Count() > 0)
            {
                int lastIndex = _constructorParametersObj.AsEnumerable().Count() - 1;
                int index = 0;
                Dictionary<string, int> countConstructor = new Dictionary<string, int>();
                foreach (PropertyInfo property in _constructorParametersObj.AsEnumerable())
                {
                    if (property.Id != null && property.TypeScriptType() != null)
                    {
                        string propertyIsModel = IsModelOrEnum(property);
                        if (!countConstructor.ContainsKey(property.Id))
                            countConstructor.Add(property.Id, 1);
                        else
                            countConstructor[property.Id] = countConstructor[property.Id] + 1;
                        string type =  property.TypeScriptType();
                        if (!propertyIsModel.Equals(""))
                        {
                            type = PascalCase(type);
                        }
                        if (property.IsCollection && index == lastIndex)
                        {

            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 179 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(property.Id) + countConstructor[property.Id]));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 179 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type + propertyIsModel));
            
            #line default
            #line hidden
            this.Write("[]\r\n");
            
            #line 180 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                        }
                        else if (index == lastIndex)
                        {

            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 185 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(property.Id) + countConstructor[property.Id]));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 185 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type + propertyIsModel));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 186 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                        }
                        else if (property.IsCollection)
                        {

            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 191 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(property.Id) + countConstructor[property.Id]));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 191 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type + propertyIsModel));
            
            #line default
            #line hidden
            this.Write("[],\r\n");
            
            #line 192 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                        }
                        else
                        {

            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 197 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(property.Id) + countConstructor[property.Id]));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 197 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type + propertyIsModel));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 198 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                        }
                    }
                    index++;
                }
            }

            
            #line default
            #line hidden
            this.Write("  ) {\r\n");
            
            #line 206 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

            Dictionary<string, int> countObj = new Dictionary<string, int>();
            if (_superPropertiesObj.AsEnumerable() != null && _superPropertiesObj.AsEnumerable().Count() > 0)
            {

            
            #line default
            #line hidden
            this.Write("    super(\r\n");
            
            #line 212 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                int lastIndex = _superPropertiesObj.AsEnumerable().Count() - 1;
                int index = 0;
                
                foreach (PropertyInfo property in _superPropertiesObj.AsEnumerable())
                {
                    if (property.Id != null)
                    {
                        if (!countObj.ContainsKey(property.Id))
                            countObj.Add(property.Id, 1);
                        else
                            countObj[property.Id] = countObj[property.Id] + 1;
                        if (index == lastIndex)
                        {

            
            #line default
            #line hidden
            this.Write("      ");
            
            #line 227 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(property.Id) + countObj[property.Id]));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 228 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                        }
                        else
                        {

            
            #line default
            #line hidden
            this.Write("      ");
            
            #line 233 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(property.Id) + countObj[property.Id]));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 234 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                        }
                    }
                    index++;
                }

            
            #line default
            #line hidden
            this.Write("    );\r\n");
            
            #line 241 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

            }

            if (_entity.Properties.AsEnumerable() != null)
            {
                foreach (PropertyInfo property in _entity.Properties.AsEnumerable())
                {
                    if (property.Id != null)
                    {
                        if (!countObj.ContainsKey(property.Id))
                            countObj.Add(property.Id, 1);
                        else
                            countObj[property.Id] = countObj[property.Id] + 1;

            
            #line default
            #line hidden
            this.Write("    this.");
            
            #line 255 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(property.Id)));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 255 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(property.Id) + countObj[property.Id]));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 256 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                    }
                }
            }

            if (_entity.References.AsEnumerable() != null)
            {
                foreach (ReferenceInfo reference in _entity.References.AsEnumerable())
                {
                    if (reference.Id != null)
                    {
                        if (!countObj.ContainsKey(reference.Id))
                            countObj.Add(reference.Id, 1);
                        else
                            countObj[reference.Id] = countObj[reference.Id] + 1;

            
            #line default
            #line hidden
            this.Write("    this.");
            
            #line 272 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(reference.Id)));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 272 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(reference.Id) + countObj[reference.Id]));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 273 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

                    }
                }
            }

            
            #line default
            #line hidden
            this.Write("  }\r\n}\r\n");
            
            #line 280 "C:\Users\PC\Documents\Gits\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\DataModel\Templates\DataModelTemplate.tt"

        }
    }

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
