<#@ include file="..\..\Base\Templates\Include.tt" #>
/*
 * You should add your licence here, here is an example :
 *
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
<#
    if (DataModel != null
        && DataModel.Id != null)
    {
        var alreadyImported = new List<string>();

        if (ConstructorParametersObj.AsEnumerable() != null)
        {
            foreach (var property in ConstructorParametersObj.AsEnumerable())
            {
                if (property.Target != null
                    && property.Type != null
                    && !alreadyImported.AsEnumerable().Contains(property.Type))
                {
                    alreadyImported.Add(property.Type);

                    if (property.Target.IsEnum)
                    {
#>
import { <#= property.Type.ToPascalCase() #>Enum } from '../models/<#= property.Type.ToCamelCase() #>Enum';
<#
                    }
                    else
                    {
#>
import { <#= property.Type.ToPascalCase() #>Model } from '../models/<#= property.Type.ToCamelCase() #>Model';
<#
                    }
                }
            }
        }

        if (DataModel.References.AsEnumerable() != null)
        {
            foreach (var reference in DataModel.References.AsEnumerable())
            {
                if (reference.Target != null
                    && reference.Type != null
                    && !alreadyImported.AsEnumerable().Contains(reference.Type))
                {
                    alreadyImported.Add(reference.Type);

                    if (reference.Target.IsEnum)
                    {
#>
import { <#= reference.Type.ToPascalCase() #>Enum } from '../models/<#= reference.Type.ToCamelCase() #>Enum';
<#
                    }
                    else
                    {
#>
import { <#= reference.Type.ToPascalCase() #>Model } from '../models/<#= reference.Type.ToCamelCase() #>Model';
<#
                    }
                }
            }
        }
#>
/**
 * class: <#= DataModel.Id.ToPascalCase() #>
 * You should add a description of your entity here.
 * This viewModel is a reference used in Concerns or
 * in APIs' parameters or return types.
 * This model is generated from ViewModel domain.
 */
export class <#= DataModel.Id.ToPascalCase() #> {
<#
        if (DataModel.Properties.AsEnumerable() != null)
        {
            foreach (var property in DataModel.Properties.AsEnumerable())
            {
                if (property.Id != null
                    && property.TypeScriptType() != null
                    && property.IsCollection)
                {
#>
  /**
   * property.
   * isCollection.
   */
  public <#= property.Id.ToCamelCase() #>: <#= property.TypeScriptType() #>[];
<#
                }
                else if (property.Id != null
                        && property.TypeScriptType() != null)
                {
#>
  /**
   * property.
   */
  public <#= property.Id.ToCamelCase() #>: <#= property.TypeScriptType() #>;
<#
                }
            }
        }

        if (DataModel.References.AsEnumerable() != null)
        {
            foreach (var reference in DataModel.References.AsEnumerable())
            {
                if (reference.Id != null
                    && reference.Target != null
                    && reference.Target.IsEnum)
                {
#>
  /**
   * reference.
   * isEnum.
   */
  public <#= reference.Id.ToCamelCase() #>: <#= reference.TypeScriptType().ToPascalCase() #>Enum;
<#
                }
                else if (reference.Id != null
                        && reference.TypeScriptType() != null
                        && reference.IsCollection)
                {
#>
  /**
   * reference.
   * isCollection.
   */
  public <#= reference.Id.ToCamelCase() #>: <#= reference.TypeScriptType().ToPascalCase() #>Model[];
<#
                }
                else if (reference.Id != null
                        && reference.TypeScriptType() != null)
                {
#>
  /**
   * reference.
   */
  public <#= reference.Id.ToCamelCase() #>: <#= reference.TypeScriptType().ToPascalCase() #>Model;
<#
                }
            }
        }
#>
  constructor(
<#
            if (ConstructorParametersObj.AsEnumerable() != null
                && ConstructorParametersObj.AsEnumerable().Count() > 0)
            {
                var lastIndex = ConstructorParametersObj.AsEnumerable().Count() - 1;
                var index = 0;
                var countConstructor = new Dictionary<string, int>();

                foreach (var property in ConstructorParametersObj.AsEnumerable())
                {
                    if (property.Id != null
                        && property.TypeScriptType() != null)
                    {
                        if (!countConstructor.ContainsKey(property.Id))
                        {
                            countConstructor.Add(property.Id, 1);
                        }
                        else
                        {
                            countConstructor[property.Id] = countConstructor[property.Id] + 1;
                        }

                        var type =  property.TypeScriptType();

                        if (property.IsModel())
                        {
                            type = $"{type.ToPascalCase()}Model";
                        }
                        else if (property.IsEnum())
                        {
                            type = $"{type.ToPascalCase()}Enum";
                        }

                        if (property.IsCollection
                            && index == lastIndex)
                        {
#>
    <#= $"{property.Id.ToCamelCase()}{countConstructor[property.Id]}" #>: <#= type #>[]
<#
                        }
                        else if (index == lastIndex)
                        {
#>
    <#= $"{property.Id.ToCamelCase()}{countConstructor[property.Id]}" #>: <#= type #>
<#
                        }
                        else if (property.IsCollection)
                        {
#>
    <#= $"{property.Id.ToCamelCase()}{countConstructor[property.Id]}" #>: <#= type #>[],
<#
                        }
                        else
                        {
#>
    <#= $"{property.Id.ToCamelCase()}{countConstructor[property.Id]}" #>: <#= type #>,
<#
                        }
                    }

                    index++;
                }
            }
#>
  ) {
<#
            var countObj = new Dictionary<string, int>();

            if (DataModel.Properties.AsEnumerable() != null)
            {
                foreach (var property in DataModel.Properties.AsEnumerable())
                {
                    if (property.Id != null)
                    {
                        if (!countObj.ContainsKey(property.Id))
                        {
                            countObj.Add(property.Id, 1);
                        }
                        else
                        {
                            countObj[property.Id] = countObj[property.Id] + 1;
                        }
#>
    this.<#= property.Id.ToCamelCase() #> = <#= $"{property.Id.ToCamelCase()}{countObj[property.Id]}" #>;
<#
                    }
                }
            }

            if (DataModel.References.AsEnumerable() != null)
            {
                foreach (var reference in DataModel.References.AsEnumerable())
                {
                    if (reference.Id != null)
                    {
                        if (!countObj.ContainsKey(reference.Id))
                        {
                            countObj.Add(reference.Id, 1);
                        }
                        else
                        {
                            countObj[reference.Id] = countObj[reference.Id] + 1;
                        }
#>
    this.<#= reference.Id.ToCamelCase() #> = <#= $"{reference.Id.ToCamelCase()}{countObj[reference.Id]}" #>;
<#
                    }
                }
            }
#>
  }
}
<#
    }
#>
