<#@ include file="..\..\Base\Templates\Include.tt" #>
<#@ import namespace="Mobioos.Foundation.Jade.Extensions" #>
import { Observable } from 'rxjs';
import { fakeAsync, flushMicrotasks, TestBed } from '@angular/core/testing';
import { DataServiceMock } from '../../test-config/mocks/dataServiceMock';
import { DataService } from './data.service';
import { <#= TextConverter.PascalCase(_api.Id) #> } from './<#= TextConverter.CamelCase(_api.Id) #>.service';
<#
    if (_viewModels.AsEnumerable() != null)
    {
        foreach(string viewModel in _viewModels.AsEnumerable())
        {
#>
import { <#= TextConverter.PascalCase(viewModel) #> } from '../viewModels/<#= TextConverter.CamelCase(viewModel) #>';
<#
        }
    }
#>

describe('<#= TextConverter.PascalCase(_api.Id) #> service', () => {
  let <#= TextConverter.CamelCase(_api.Id) #>Spy: <#= TextConverter.PascalCase(_api.Id) #>;
  let spy: jasmine.Spy;

  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [
        <#= TextConverter.PascalCase(_api.Id) #>,
        { provide: DataService, useClass: DataServiceMock }
      ]
    });
    <#= TextConverter.CamelCase(_api.Id) #>Spy = TestBed.get(<#= TextConverter.PascalCase(_api.Id) #>);
  });
<#
    if (_api != null && _api.Actions.AsEnumerable() != null)
    {
        foreach (ApiActionInfo action in _api.Actions.AsEnumerable())
        {
            if (action.Id != null && action.Url != null && action.Type != null)
            {
#>
  it('<#= TextConverter.PascalCase(_api.Id) #> service: should <#= TextConverter.CamelCase(action.Id) #>', fakeAsync(() => {
    const <#= TextConverter.CamelCase(action.Id) #>Api = '<#= action.Url #>';
    spy = spyOn(<#= TextConverter.CamelCase(_api.Id) #>Spy, '<#= TextConverter.CamelCase(action.Id) #>').and.callThrough();
    <#= TextConverter.CamelCase(_api.Id) #>Spy.<#= TextConverter.CamelCase(action.Id) #>(
<#
                if (action.Parameters.AsEnumerable() != null && action.Parameters.AsEnumerable().Count() > 0)
                {
                    ApiParameterInfo last = action.Parameters.AsEnumerable().Last();
                    foreach (ApiParameterInfo apiParameter in action.Parameters.AsEnumerable())
                    {
                        if (apiParameter.Id != null)
                        {
                            string type = apiParameter.TypeScriptType();
                            string value = getValueFromType(type);
                            if (apiParameter.Equals(last))
                            {
#>
      <#= value #>
<#
                            }
                            else
                            {
#>
      <#= value #>,
<#
                            }
                        }
                    }
                }
#>
    );
    flushMicrotasks();
    expect(spy).toHaveBeenCalledWith(
<#
                if (action.Parameters.AsEnumerable() != null && action.Parameters.AsEnumerable().Count() > 0)
                {
                    ApiParameterInfo last = action.Parameters.AsEnumerable().Last();
                    foreach (ApiParameterInfo apiParameter in action.Parameters.AsEnumerable())
                    {
                        if (apiParameter.Id != null)
                        {
                            string type = apiParameter.TypeScriptType();
                            string value = getValueFromType(type);
                            if (apiParameter.Equals(last))
                            {
#>
      <#= value #>
<#
                            }
                            else
                            {
#>
      <#= value #>,
<#
                            }
                        }
                    }
                }
#>
    );
    spy = spyOn(<#= TextConverter.CamelCase(_api.Id) #>Spy._dataService, '<#= ConvertActionType(action.Type) #>').and.callThrough();
    <#= TextConverter.CamelCase(_api.Id) #>Spy.<#= TextConverter.CamelCase(action.Id) #>(
<#
                if (action.Parameters.AsEnumerable() != null && action.Parameters.AsEnumerable().Count() > 0)
                {
                    ApiParameterInfo last = action.Parameters.AsEnumerable().Last();
                    foreach (ApiParameterInfo apiParameter in action.Parameters.AsEnumerable())
                    {
                        if (apiParameter.Id != null)
                        {
                            string type = apiParameter.TypeScriptType();
                            string value = getValueFromType(type);
                            if (apiParameter.Equals(last))
                            {
#>
      <#= value #>
<#
                            }
                            else
                            {
#>
      <#= value #>,
<#
                            }
                        }
                    }
                }
#>
    );
    flushMicrotasks();
<#
                switch (action.Type.ToLower())
                {
                    case "dataget": case "datalist": case "datadelete":
#>
    expect(spy).toHaveBeenCalledWith(
      `${<#= TextConverter.CamelCase(action.Id) #>Api}`,
      {
<#
                        if (action.Parameters.AsEnumerable() != null && action.Parameters.AsEnumerable().Count() > 0)
                        {
                            ApiParameterInfo last = action.Parameters.AsEnumerable().Last();
                            foreach (ApiParameterInfo apiParameter in action.Parameters.AsEnumerable())
                            {
                                if (apiParameter.Id != null)
                                {
                                    string type = apiParameter.TypeScriptType();
                                    string value = getValueFromType(type);
                                    if (apiParameter.Equals(last))
                                    {
#>
      <#= TextConverter.CamelCase(apiParameter.Id) #>: JSON.stringify(<#= value #>)
<#
                                    }
                                    else
                                    {
#>
      <#= TextConverter.CamelCase(apiParameter.Id) #>: JSON.stringify(<#= value #>),
<#
                                    }
                                }
                            }
                        }
#>
      }
    );
<#
                        break;
                    default:
#>
    expect(spy).toHaveBeenCalledWith(
      `${<#= TextConverter.CamelCase(action.Id) #>Api}`,
      {
<#
                        if (action.Parameters.AsEnumerable() != null && action.Parameters.AsEnumerable().Count() > 0)
                        {
                            ApiParameterInfo last = action.Parameters.AsEnumerable().Last();
                            foreach (ApiParameterInfo apiParameter in action.Parameters.AsEnumerable())
                            {
                                if (apiParameter.Id != null)
                                {
                                    string type = apiParameter.TypeScriptType();
                                    string value = getValueFromType(type);
                                    if (apiParameter.Equals(last))
                                    {
#>
      <#= TextConverter.CamelCase(apiParameter.Id) #>: <#= value #>
<#
                                    }
                                    else
                                    {
#>
      <#= TextConverter.CamelCase(apiParameter.Id) #>: <#= value #>,
<#
                                    }
                                }
                            }
                        }
#>
      },
      {}
    );
<#
                    break;
                }
#>
    var result = spy.calls.mostRecent().returnValue;
    expect(result instanceof Observable).toBeTruthy();
  }));

<#
            }
        }
    }
#>
});
