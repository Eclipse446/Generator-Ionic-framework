<#@ include file="..\..\Base\Templates\Include.tt" #>
<#
    if (SmartAppId != null
        && ConcernId != null
        && Layout != null
        && Layout.Id != null)
    {
        var smartAppId = SmartAppId.ToPascalCase();
        var layout = $"{ConcernId.ToPascalCase()}{Layout.Id.ToPascalCase()}";
        var layoutToLower = $"{ConcernId.ToCamelCase()}-{Layout.Id.ToCamelCase()}";
#>
import { IonicModule, NavController, Platform } from 'ionic-angular';
import { NavMock } from '../../../../test-config/mocks/navMock';
import { PlatformMock } from '../../../../test-config/mocks/platformMock';
import { SplashScreen } from '@ionic-native/splash-screen';
import { SplashScreenMock } from '../../../../test-config/mocks/splashScreenMock';
import { StatusBar } from '@ionic-native/status-bar';
import { StatusBarMock } from '../../../../test-config/mocks/statusBarMock';
import { Title } from '@angular/platform-browser';
import { TitleMock } from '../../../../test-config/mocks/titleMock';
import { async, ComponentFixture, fakeAsync, flushMicrotasks, TestBed } from '@angular/core/testing';
<#
        var isLanguages = false;
        if (Languages.AsEnumerable() != null
            && Languages.AsEnumerable().Count() > 0)
        {
            isLanguages = true;
        }

        if (isLanguages)
        {
#>
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import { TranslateServiceMock } from '../../../../test-config/mocks/translateServiceMock';
import { LanguagePageModule } from '../../language/language.module';
import { LanguagePage } from '../../language/language';
<#
        }
#>
import { <#= smartAppId #> } from '../../../app/app.component';
import { <#= layout #> } from "./<#= layoutToLower #>";
<#
        if (ViewModels.AsEnumerable() != null
            && ViewModels.AsEnumerable().Count() > 0)
        {
            foreach (var viewModel in ViewModels.AsEnumerable())
            {
#>
import { <#= viewModel.ToPascalCase() #> } from '../../../viewModels/<#= viewModel.ToCamelCase() #>';
<#
            }
        }

        if (ApiDomainServices.AsEnumerable() != null
            && ApiDomainServices.AsEnumerable().Count() > 0)
        {
            foreach (var service in ApiDomainServices.AsEnumerable())
            {
#>
import { <#= service.ToPascalCase() #> } from '../../../services/<#= service.ToCamelCase() #>.service';
import { <#= service.ToPascalCase() #>Mock } from '../../../../test-config/mocks/<#= service.ToCamelCase() #>Mock';
<#
            }
        }
#>
describe('<#= layout #> Component', () => {
  let fixture: ComponentFixture<<#= layout #>>;
  let component: <#= layout #>;
  let spy: jasmine.Spy;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [
        <#= smartAppId #>,
        <#= layout #>
      ],
      imports: [
<#
        if (isLanguages)
        {
#>
        LanguagePageModule,
        TranslateModule.forChild(),
<#
        }
#>
        IonicModule.forRoot(<#= smartAppId #>)
      ],
      providers: [
<#
        if (ApiDomainServices.AsEnumerable() != null
            && ApiDomainServices.AsEnumerable().Count() > 0)
        {
            foreach (var service in ApiDomainServices.AsEnumerable())
            {
#>
        { provide: <#= service.ToPascalCase() #>, useClass: <#= service.ToPascalCase() #>Mock },
<#
            }
        }
#>
        { provide: Platform, useClass: PlatformMock },
        { provide: StatusBar, useClass: StatusBarMock },
        { provide: SplashScreen, useClass: SplashScreenMock },
<#
        if (isLanguages)
        {
#>
        { provide: TranslateService, useClass: TranslateServiceMock },
<#
        }
#>
        { provide: NavController, useClass: NavMock },
        { provide: Title, useClass: TitleMock },
      ]
    }).compileComponents();
  }));

  beforeEach(async() => {
    fixture = TestBed.createComponent(<#= layout #>);
    component = fixture.componentInstance;
  });
  
  afterEach(() => {
    fixture.destroy();
    component = null;
  });

  it('<#= layout #> Component: should be created', fakeAsync(() => {
    expect(component instanceof <#= layout #>).toBeTruthy();
  }));

<#
        if (isLanguages)
        {
#>
  it('<#= layout #> Component: should navigate to language page', fakeAsync(() => {
    spy = spyOn(component, 'onLanguage').and.callThrough();
    component.onLanguage();
    flushMicrotasks();
    expect(spy).toHaveBeenCalled();
    spy = spyOn(component._nav, 'push').and.callThrough();
    component.onLanguage();
    flushMicrotasks();
    expect(spy).toHaveBeenCalledWith(LanguagePage);
    spy.calls.mostRecent().returnValue.then((result) => {
      expect(result).toEqual('PUSH');
    });
  }));
<#
        }

        if (Layout.Actions.AsEnumerable() != null)
        {
            foreach (var action in Layout.Actions.AsEnumerable())
            {
                switch (action.Type.ToLower())
                {
                    case "navigation":
                        if (action.Target != null)
                        {
                            var actionTargetSplitted = action.Target.Split('.');
                            var targetedConcern = actionTargetSplitted[0].ToCamelCase();
                            var targetedLayout = actionTargetSplitted[1].ToCamelCase();
#>
  it('<#= layout #> Component - on<#= action.Id.ToPascalCase() #>: should navigate to <#= $"{targetedConcern}-{targetedLayout}" #> page', fakeAsync(() => {
    spy = spyOn(component, 'on<#= action.Id.ToPascalCase() #>').and.callThrough();
    component.on<#= action.Id.ToPascalCase() #>();
    flushMicrotasks();
    expect(spy).toHaveBeenCalled();
    spy = spyOn(component._nav, 'push').and.callThrough();
    component.on<#= action.Id.ToPascalCase() #>();
    flushMicrotasks();
    expect(spy).toHaveBeenCalledWith('<#= $"{targetedConcern}-{targetedLayout}" #>');
    spy.calls.mostRecent().returnValue.then((result) => {
      expect(result).toEqual('PUSH');
    });
  }));

<#
                        }
                        break;
                    case "method":
#>
  it('<#= layout #> Component - on<#= action.Id.ToPascalCase() #>: should do nothing', fakeAsync(() => {
    spy = spyOn(component, 'on<#= action.Id.ToPascalCase() #>').and.callThrough();
    component.on<#= action.Id.ToPascalCase() #>();
    flushMicrotasks();
    expect(spy).toHaveBeenCalled();
    var result = spy.calls.mostRecent().returnValue;
    expect(result).toBeUndefined();
  }));

<#
                        break;
                    case "dataget": case "datalist": case "datacreate": case "dataupdate": case "datadelete":
                        if (action.Api != null
                            && Api != null)
                        {
                            var actionSplitted = action.Api.Split('.');
                            var apiService = actionSplitted[0];
                            var apiAction = actionSplitted[1];

                            foreach (var api in Api.AsEnumerable())
                            {
                                if (api.Id.ToLower().Equals(apiService.ToLower())
                                    && api.Actions.AsEnumerable() != null)
                                {
                                    foreach (var apiA in api.Actions.AsEnumerable())
                                    {
                                        if (apiA.Id.ToLower().Equals(apiAction.ToLower()))
                                        {
#>
  it('<#= layout #> Component - on<#= action.Id.ToPascalCase() #>: should use <#= api.Id.ToCamelCase() #> service to <#= action.Id.ToPascalCase() #>', fakeAsync(() => {
<#
                                            if (apiA.Parameters.AsEnumerable() != null
                                                && apiA.Parameters.AsEnumerable().Count() > 0)
                                            {
                                                foreach (var apiParameter in apiA.Parameters.AsEnumerable())
                                                {
                                                    if (apiParameter.Id != null)
                                                    {
                                                        var type = apiParameter.TypeScriptType();
                                                        var value = GetValueFromType(type);
#>
    var <#= apiParameter.Id.ToCamelCase() #> = <#= value #>;
<#
                                                    }
                                                }
                                            }
#>
    spy = spyOn(component, 'on<#= action.Id.ToPascalCase() #>').and.callThrough();
    component.on<#= action.Id.ToPascalCase() #>(
<#
                                            if (apiA.Parameters.AsEnumerable() != null
                                                && apiA.Parameters.AsEnumerable().Count() > 0)
                                            {
                                                var last = apiA.Parameters.AsEnumerable().Last();

                                                foreach (var apiParameter in apiA.Parameters.AsEnumerable())
                                                {
                                                    if (apiParameter.Id != null)
                                                    {
                                                        var type = apiParameter.TypeScriptType();
                                                        var value = GetValueFromType(type);

                                                        if (apiParameter.Equals(last))
                                                        {
#>
    <#= apiParameter.Id.ToCamelCase() #>
<#
                                                        }
                                                        else
                                                        {
#>
    <#= apiParameter.Id.ToCamelCase() #>,
<#
                                                        }
                                                    }
                                                }
                                            }
#>
    );
    flushMicrotasks();
    expect(spy).toHaveBeenCalledWith(
<#
                                            if (apiA.Parameters.AsEnumerable() != null
                                                && apiA.Parameters.AsEnumerable().Count() > 0)
                                            {
                                                var last = apiA.Parameters.AsEnumerable().Last();

                                                foreach (var apiParameter in apiA.Parameters.AsEnumerable())
                                                {
                                                    if (apiParameter.Id != null)
                                                    {
                                                        var type = apiParameter.TypeScriptType();
                                                        var value = GetValueFromType(type);

                                                        if (apiParameter.Equals(last))
                                                        {
#>
    <#= apiParameter.Id.ToCamelCase() #>
<#
                                                        }
                                                        else
                                                        {
#>
    <#= apiParameter.Id.ToCamelCase() #>,
<#
                                                        }
                                                    }
                                                }
                                            }
#>
    );
    spy = spyOn(component._<#= api.Id.ToCamelCase() #>, '<#= apiA.Id.ToCamelCase() #>').and.callThrough();
    component.on<#= action.Id.ToPascalCase() #>(
<#
                                            if (apiA.Parameters.AsEnumerable() != null
                                                && apiA.Parameters.AsEnumerable().Count() > 0)
                                            {
                                                var last = apiA.Parameters.AsEnumerable().Last();
                                                foreach (var apiParameter in apiA.Parameters.AsEnumerable())
                                                {
                                                    if (apiParameter.Id != null)
                                                    {
                                                        var type = apiParameter.TypeScriptType();
                                                        var value = GetValueFromType(type);

                                                        if (apiParameter.Equals(last))
                                                        {
#>
    <#= apiParameter.Id.ToCamelCase() #>
<#
                                                        }
                                                        else
                                                        {
#>
    <#= apiParameter.Id.ToCamelCase() #>,
<#
                                                        }
                                                    }
                                                }
                                            }
#>
    );
    flushMicrotasks();
    expect(spy).toHaveBeenCalledWith(
<#
                                            if (apiA.Parameters.AsEnumerable() != null
                                                && apiA.Parameters.AsEnumerable().Count() > 0)
                                            {
                                                var last = apiA.Parameters.AsEnumerable().Last();

                                                foreach (var apiParameter in apiA.Parameters.AsEnumerable())
                                                {
                                                    if (apiParameter.Id != null)
                                                    {
                                                        var type = apiParameter.TypeScriptType();
                                                        var value = GetValueFromType(type);

                                                        if (apiParameter.Equals(last))
                                                        {
#>
    <#= apiParameter.Id.ToCamelCase() #>
<#
                                                        }
                                                        else
                                                        {
#>
    <#= apiParameter.Id.ToCamelCase() #>,
<#
                                                        }
                                                    }
                                                }
                                            }
#>
    );
    var result = spy.calls.mostRecent().returnValue;
    expect(result).toBeDefined();
  }));
<#
                                        }
                                    }
                                }
                            }
                        }
                        break;
                }
            }
        }
#>
});
<#
    }
#>