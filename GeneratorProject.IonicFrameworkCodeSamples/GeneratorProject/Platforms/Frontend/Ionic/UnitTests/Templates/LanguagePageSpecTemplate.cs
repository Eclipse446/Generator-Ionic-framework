// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace GeneratorProject.Platforms.Frontend.Ionic
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Mobioos.Scaffold.BaseGenerators.TextTemplating;
    using Common.Generator.Framework.Extensions;
    using Mobioos.Foundation.Jade.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Temoe\Documents\Gits\Ionic-framework\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\UnitTests\Templates\LanguagePageSpecTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class LanguagePageSpecTemplate : TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"
import { IonicModule, NavController, Platform } from 'ionic-angular';
import { NavMock } from '../../../test-config/mocks/navMock';
import { PlatformMock } from '../../../test-config/mocks/platformMock';
import { SplashScreen } from '@ionic-native/splash-screen';
import { SplashScreenMock } from '../../../test-config/mocks/splashScreenMock';
import { StatusBar } from '@ionic-native/status-bar';
import { StatusBarMock } from '../../../test-config/mocks/statusBarMock';
import { Title } from '@angular/platform-browser';
import { TitleMock } from '../../../test-config/mocks/titleMock';
import { async, ComponentFixture, fakeAsync, flushMicrotasks, TestBed } from '@angular/core/testing';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import { TranslateServiceMock } from '../../../test-config/mocks/translateServiceMock';
import { LanguagePageModule } from './language.module';
import { LanguagePage } from './language';
import { ");
            
            #line 16 "C:\Users\Temoe\Documents\Gits\Ionic-framework\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\UnitTests\Templates\LanguagePageSpecTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_smartAppId));
            
            #line default
            #line hidden
            this.Write(@" } from '../../app/app.component';
describe('LanguagePage Component', () => {
  let fixture: ComponentFixture<LanguagePage>;
  let component: LanguagePage;
  let spy: jasmine.Spy;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [
        ");
            
            #line 25 "C:\Users\Temoe\Documents\Gits\Ionic-framework\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\UnitTests\Templates\LanguagePageSpecTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_smartAppId));
            
            #line default
            #line hidden
            this.Write(",\r\n        LanguagePage\r\n      ],\r\n      imports: [\r\n        TranslateModule.forC" +
                    "hild(),\r\n        IonicModule.forRoot(");
            
            #line 30 "C:\Users\Temoe\Documents\Gits\Ionic-framework\GeneratorProject.IonicFrameworkCodeSamples\GeneratorProject\Platforms\Frontend\Ionic\UnitTests\Templates\LanguagePageSpecTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_smartAppId));
            
            #line default
            #line hidden
            this.Write(")\r\n      ],\r\n      providers: [\r\n        { provide: Platform, useClass: PlatformM" +
                    "ock },\r\n        { provide: StatusBar, useClass: StatusBarMock },\r\n        { prov" +
                    "ide: SplashScreen, useClass: SplashScreenMock },\r\n        { provide: TranslateSe" +
                    "rvice, useClass: TranslateServiceMock },\r\n        { provide: NavController, useC" +
                    "lass: NavMock },\r\n        { provide: Title, useClass: TitleMock },\r\n      ]\r\n   " +
                    " }).compileComponents();\r\n  }));\r\n\r\n  beforeEach(async() => {\r\n    fixture = Tes" +
                    "tBed.createComponent(LanguagePage);\r\n    component = fixture.componentInstance;\r" +
                    "\n  });\r\n  \r\n  afterEach(() => {\r\n    fixture.destroy();\r\n    component = null;\r\n" +
                    "  });\r\n\r\n  it(\'LanguagePage Component: should be created\', fakeAsync(() => {\r\n  " +
                    "  expect(component instanceof LanguagePage).toBeTruthy();\r\n  }));\r\n\r\n  it(\'Langu" +
                    "agePage: should go back to the previous page\', fakeAsync(() => {\r\n    spy = spyO" +
                    "n(component, \'onLanguage\').and.callThrough();\r\n    component.onLanguage();\r\n    " +
                    "flushMicrotasks();\r\n    expect(spy).toHaveBeenCalled();\r\n    spy = spyOn(compone" +
                    "nt._navCtrl, \'pop\').and.callThrough();\r\n    component.onLanguage();\r\n    flushMi" +
                    "crotasks();\r\n    expect(spy).toHaveBeenCalled();\r\n    spy.calls.mostRecent().ret" +
                    "urnValue.then((result) => {\r\n      expect(result).toEqual(\'POP\');\r\n    });\r\n  })" +
                    ");\r\n\r\n  it(\'LanguagePage: should change language\', fakeAsync(() => {\r\n    var la" +
                    "ng = \'en\';\r\n    spy = spyOn(component, \'changeLanguage\').and.callThrough();\r\n   " +
                    " component.changeLanguage(lang);\r\n    flushMicrotasks();\r\n    expect(spy).toHave" +
                    "BeenCalledWith(lang);\r\n    spy = spyOn(component._translateService, \'use\').and.c" +
                    "allThrough();\r\n    component.changeLanguage(lang);\r\n    flushMicrotasks();\r\n    " +
                    "expect(spy).toHaveBeenCalledWith(lang);\r\n    spy.calls.mostRecent().returnValue." +
                    "subscribe((result) => {\r\n      expect(result).toEqual(lang);\r\n    });\r\n  }));\r\n}" +
                    ");");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
