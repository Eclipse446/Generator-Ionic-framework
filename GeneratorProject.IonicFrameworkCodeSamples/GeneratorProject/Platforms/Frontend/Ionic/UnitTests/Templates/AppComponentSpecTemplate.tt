<#@ include file="..\..\Base\Templates\Include.tt" #>
<#
    if (SmartApp != null
        && SmartApp.Id != null)
    {
        var isLanguages = false;

        if (SmartApp.Languages.AsEnumerable() != null
            && SmartApp.Languages.AsEnumerable().Count() > 0)
        {
            isLanguages = true;
        }

        if (isLanguages)
        {
#>
import { LanguagePageModule } from '../pages/language/language.module';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import { TranslateServiceMock } from '../../test-config/mocks/translateServiceMock';
<#
        }
#>
import { ComponentFixture, async, TestBed, fakeAsync, flushMicrotasks } from '@angular/core/testing';
import { IonicModule, Platform, NavController } from 'ionic-angular';
import { StatusBar } from '@ionic-native/status-bar';
import { SplashScreen } from '@ionic-native/splash-screen';
import { Title } from '@angular/platform-browser';

import { <#= SmartApp.Id.ToPascalCase() #> } from './app.component';
<#
        if (SmartApp.Concerns.AsEnumerable() != null
            && RootLayout != null
            && RootLayout.Id != null
            && RootConcern != null
            && RootConcern.Id != null)
        {
            var concern = RootConcern.Id.ToPascalCase();
            var layout = RootLayout.Id.ToPascalCase();
            var layoutComponent = $"{concern}{layout}";
            var layoutComponentToLower = $"{concern.ToCamelCase()}-{layout.ToCamelCase()}";
#>
import { <#= layoutComponent #>PageModule } from '../pages/<#= concern.ToCamelCase() #>/<#= layout.ToCamelCase() #>/<#= layoutComponentToLower #>.module';
import { <#= layoutComponent #> } from '../pages/<#= concern.ToCamelCase() #>/<#= layout.ToCamelCase() #>/<#= layoutComponentToLower #>';
<#
        }
#>
import { PlatformMock } from '../../test-config/mocks/platformMock';
import { StatusBarMock } from '../../test-config/mocks/statusBarMock';
import { SplashScreenMock } from '../../test-config/mocks/splashScreenMock';
import { NavMock } from '../../test-config/mocks/navMock';
import { TitleMock } from '../../test-config/mocks/titleMock';

describe('<#= SmartApp.Id.ToPascalCase() #> Component', () => {
  let fixture: ComponentFixture<<#= SmartApp.Id.ToPascalCase() #>>;
  let component: <#= SmartApp.Id.ToPascalCase() #>;

  let spy: jasmine.Spy;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [<#= SmartApp.Id.ToPascalCase() #>],
      imports: [
<#
        if (isLanguages)
        {
#>
        LanguagePageModule,
        TranslateModule.forChild(),
<#
        }
#>
<#
        if (SmartApp.Concerns.AsEnumerable() != null
            && RootLayout != null
            && RootLayout.Id != null
            && RootConcern != null
            && RootConcern.Id != null)
        {
            var concern = RootConcern.Id.ToPascalCase();
            var layout = RootLayout.Id.ToPascalCase();
            var layoutComponent = $"{concern}{layout}";
            var layoutComponentToLower = $"{concern.ToCamelCase()}-{layout.ToCamelCase()}";
#>
        <#= layoutComponent #>PageModule,
<#
        }
#>
        IonicModule.forRoot(<#= SmartApp.Id.ToPascalCase() #>)
      ],
      providers: [
        { provide: Platform, useClass: PlatformMock },
        { provide: StatusBar, useClass: StatusBarMock },
        { provide: SplashScreen, useClass: SplashScreenMock },
<#
        if (isLanguages)
        {
#>
        { provide: TranslateService, useClass: TranslateServiceMock },
<#
        }
#>
        { provide: NavController, useClass: NavMock },
        { provide: Title, useClass: TitleMock }
      ]
    }).compileComponents();
  }));

  beforeEach(async() => {
    fixture = TestBed.createComponent(<#= SmartApp.Id.ToPascalCase() #>);
    component = fixture.componentInstance;
  });
  
  afterEach(() => {
    fixture.destroy();
    component = null;
  });

  it('<#= SmartApp.Id.ToPascalCase() #> Component: platform should be ready', fakeAsync(() => {
    spy = spyOn(component._platform, 'ready').and.callThrough();
    var app = new <#= SmartApp.Id.ToPascalCase() #>(
<#
        if (isLanguages)
        {
#>
      component._translateService,
<#
        }

        if (IsMenu)
        {
#>
      component._events,
<#
        }
#>
      component._platform,
      component._statusBar,
      component._splashScreen,
      component._title
    );
    app._nav = component._nav;
    flushMicrotasks();
    expect(spy).toHaveBeenCalled();
    spy.calls.mostRecent().returnValue.then((result) => {
      expect(result).toEqual('READY');
    });
  }));

  it('<#= SmartApp.Id.ToPascalCase() #> Component: should set default style statusBar', fakeAsync(() => {
    spy = spyOn(component._statusBar, 'styleDefault').and.callThrough();
    var app = new <#= SmartApp.Id.ToPascalCase() #>(
<#
        if (isLanguages)
        {
#>
      component._translateService,
<#
        }

        if (IsMenu)
        {
#>
      component._events,
<#
        }
#>
      component._platform,
      component._statusBar,
      component._splashScreen,
      component._title
    );
    app._nav = component._nav;
    flushMicrotasks();
    expect(spy).toHaveBeenCalled();
    var result = spy.calls.mostRecent().returnValue;
    expect(result).toBeUndefined();
  }));

  it('<#= SmartApp.Id.ToPascalCase() #> Component: should hide splashscreen', fakeAsync(() => {
    spy = spyOn(component._splashScreen, 'hide').and.callThrough();
    var app = new <#= SmartApp.Id.ToPascalCase() #>(
<#
        if (isLanguages)
        {
#>
      component._translateService,
<#
        }

        if (IsMenu)
        {
#>
      component._events,
<#
        }
#>
      component._platform,
      component._statusBar,
      component._splashScreen,
      component._title
    );
    app._nav = component._nav;
    flushMicrotasks();
    expect(spy).toHaveBeenCalled();
    var result = spy.calls.mostRecent().returnValue;
    expect(result).toBeUndefined();
  }));

  it('<#= SmartApp.Id.ToPascalCase() #> Component: should set navigation root page', fakeAsync(() => {
    spy = spyOn(component._nav, 'setRoot').and.callThrough();
    var app = new <#= SmartApp.Id.ToPascalCase() #>(
<#
        if (isLanguages)
        {
#>
      component._translateService,
<#
        }

        if (IsMenu)
        {
#>
      component._events,
<#
        }
#>
      component._platform,
      component._statusBar,
      component._splashScreen,
      component._title
    );
    app._nav = component._nav;
    flushMicrotasks();
    expect(spy).toHaveBeenCalledWith(
<#
        if (SmartApp.Concerns.AsEnumerable() != null
            && RootLayout != null
            && RootLayout.Id != null
            && RootConcern != null
            && RootConcern.Id != null)
        {
            var concern = RootConcern.Id.ToPascalCase();
            var layout = RootLayout.Id.ToPascalCase();
            var layoutComponent = $"{concern}{layout}";
            var layoutComponentToLower = $"{concern.ToCamelCase()}-{layout.ToCamelCase()}";
#>
      <#= layoutComponent #>
<#
        }
#>
    );
    spy.calls.mostRecent().returnValue.then((result) => {
      expect(result).toBe(true);
    });
  }));

  it('<#= SmartApp.Id.ToPascalCase() #> Component: should set default language', fakeAsync(() => {
    spy = spyOn(component._translateService, 'setDefaultLang').and.callThrough();
    var app = new <#= SmartApp.Id.ToPascalCase() #>(
<#
        if (isLanguages)
        {
#>
      component._translateService,
<#
        }

        if (IsMenu)
        {
#>
      component._events,
<#
        }
#>
      component._platform,
      component._statusBar,
      component._splashScreen,
      component._title
    );
    app._nav = component._nav;
    flushMicrotasks();
    expect(spy).toHaveBeenCalled();
    var result = spy.calls.mostRecent().returnValue;
    expect(result).toBeUndefined();
  }));

  it('<#= SmartApp.Id.ToPascalCase() #> Component: should use a language', fakeAsync(() => {
    spy = spyOn(component._translateService, 'use').and.callThrough();
    var app = new <#= SmartApp.Id.ToPascalCase() #>(
<#
        if (isLanguages)
        {
#>
      component._translateService,
<#
        }

        if (IsMenu)
        {
#>
      component._events,
<#
        }
#>
      component._platform,
      component._statusBar,
      component._splashScreen,
      component._title
    );
    app._nav = component._nav;
    flushMicrotasks();
    expect(spy).toHaveBeenCalled();
    spy.calls.mostRecent().returnValue.subscribe((result) => {
      expect(result).toBeDefined();
    });
  }));

  it('<#= SmartApp.Id.ToPascalCase() #> Component: should translate applicationTitle to test', fakeAsync(() => {
    spy = spyOn(component._translateService, 'get').and.callThrough();
    var app = new <#= SmartApp.Id.ToPascalCase() #>(
<#
        if (isLanguages)
        {
#>
      component._translateService,
<#
        }

        if (IsMenu)
        {
#>
      component._events,
<#
        }
#>
      component._platform,
      component._statusBar,
      component._splashScreen,
      component._title
    );
    app._nav = component._nav;
    flushMicrotasks();
    expect(spy).toHaveBeenCalledWith('applicationTitle');
    spy.calls.mostRecent().returnValue.subscribe((result) => {
      expect(result).toEqual('test');
    });
  }));

  it('<#= SmartApp.Id.ToPascalCase() #> Component: should set translated title', fakeAsync(() => {
    spy = spyOn(component._title, 'setTitle').and.callThrough();
    var app = new <#= SmartApp.Id.ToPascalCase() #>(
<#
        if (isLanguages)
        {
#>
      component._translateService,
<#
        }

        if (IsMenu)
        {
#>
      component._events,
<#
        }
#>
      component._platform,
      component._statusBar,
      component._splashScreen,
      component._title
    );
    app._nav = component._nav;
    flushMicrotasks();
    expect(spy).toHaveBeenCalledWith('test');
    var result = spy.calls.mostRecent().returnValue;
    expect(result).toBeUndefined();
  }));

  it('<#= SmartApp.Id.ToPascalCase() #> Component: should be created', fakeAsync(() => {
    flushMicrotasks();
    expect(component instanceof <#= SmartApp.Id.ToPascalCase() #>).toBeTruthy();
  }));

  it('<#= SmartApp.Id.ToPascalCase() #> Component: should set root on test route', fakeAsync(() => {
    spy = spyOn(component, 'selected').and.callThrough();
    component.selected('test');
    flushMicrotasks();
    expect(spy).toHaveBeenCalledWith('test');
    spy = spyOn(component._nav, 'setRoot').and.callThrough();
    component.selected('test');
    flushMicrotasks();
    expect(spy).toHaveBeenCalledWith('test');
    spy.calls.mostRecent().returnValue.then((result) => {
      expect(result).toBe(true);
    });
  }));
});
<#
    }
#>
