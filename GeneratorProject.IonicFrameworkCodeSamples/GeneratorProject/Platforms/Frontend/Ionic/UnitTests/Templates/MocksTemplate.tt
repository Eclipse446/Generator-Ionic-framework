<#@ include file="..\..\Base\Templates\Include.tt" #>
<#@ import namespace="Mobioos.Foundation.Jade.Extensions" #>
import { Observable } from 'rxjs';
<#
    if (_viewModels.AsEnumerable() != null)
    {
        foreach(string viewModel in _viewModels.AsEnumerable())
        {
#>
import { <#= TextConverter.PascalCase(viewModel) #> } from '../../src/viewModels/<#= TextConverter.CamelCase(viewModel) #>';
<#
        }
    }

    if (_api.Id != null)
    {
#>
export class <#= TextConverter.PascalCase(_api.Id) #>Mock {
<#
        if (_api.Actions.AsEnumerable() != null)
        {
            foreach (ApiActionInfo action in _api.Actions.AsEnumerable())
            {
                if (action.Id != null && action.Url != null && action.Type != null)
                {
#>
    public <#= TextConverter.CamelCase(action.Id) #>(
<#
                    if (action.Parameters.AsEnumerable() != null && action.Parameters.AsEnumerable().Count() > 0)
                    {
                        ApiParameterInfo last = action.Parameters.AsEnumerable().Last();
                        foreach (ApiParameterInfo apiParameter in action.Parameters.AsEnumerable())
                        {
                            if (apiParameter.Id != null)
                            {
                                string type = apiParameter.TypeScriptType();
                                if (apiParameter.Equals(last))
                                {
#>
        <#= TextConverter.CamelCase(apiParameter.Id) #>Param: <#= type #>
<#
                                }
                                else
                                {
#>
        <#= TextConverter.CamelCase(apiParameter.Id) #>Param: <#= type #>,
<#
                                }
                            }
                        }
                    }

                    if (action.ReturnType != null && action.ReturnType.Id != null)
                    {
#>
    ): Observable<<#= TextConverter.PascalCase(action.ReturnType.Id) #>> {
      return Observable.of();
    }

<#
                    }
                    else
                    {
#>
    ): Observable<any> {
      return Observable.of();
    }

<#
                    }
                }
            }
        }
#>
}
<#
    }
#>