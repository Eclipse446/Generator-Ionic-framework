<#@ include file="..\..\Base\Templates\Include.tt" #>
<#@ import namespace="Mobioos.Foundation.Jade.Extensions" #>
/*
 * You should add your licence here, here is an example :
 *
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

<#
    if (_viewModels.AsEnumerable() != null)
    {
        foreach(string viewModel in _viewModels.AsEnumerable())
        {
#>
import { <#= TextConverter.PascalCase(viewModel) #> } from '../viewModels/<#= TextConverter.CamelCase(viewModel) #>';
<#
        }
    }
#>

import { DataService } from './data.service';

<#
    if (_api.Id != null)
    {
#>
/**
 * class: <#= TextConverter.PascalCase(_api.Id) #>.
<#
        if (_api.Description != null)
        {
#>
 * <#= _api.Description #>.
 * This service is generated from API domain.
<#
        }
        else
        {
#>
 * You should add a description of your service here.
 * This service is generated from API domain.
<#
        }
#>
 */
@Injectable()
export class <#= TextConverter.PascalCase(_api.Id) #> {
<#
        if (_api.Actions.AsEnumerable() != null)
        {
            foreach (ApiActionInfo action in _api.Actions.AsEnumerable())
            {
                if (action.Id != null && action.Url != null)
                {
#>
  public _<#= TextConverter.CamelCase(action.Id) #>Api = '<#= action.Url #>';
<#
                }
            }
        }
#>
  constructor(public _dataService: DataService){}
<#
        if (_api.Actions.AsEnumerable() != null)
        {
            foreach (ApiActionInfo action in _api.Actions.AsEnumerable())
            {
                if (action.Id != null && action.Url != null && action.Type != null)
                {
#>
    /**
     * method: <#= TextConverter.CamelCase(action.Id) #>.
     * You should add a description of your method here.
     * That method should be used to connect with generated
     * backend API. You should add business logic inside.
<#
                    if (action.Parameters.AsEnumerable() != null && action.Parameters.AsEnumerable().Count() > 0)
                    {
                        foreach (ApiParameterInfo apiParameter in action.Parameters.AsEnumerable())
                        {
                            if (apiParameter.Id != null)
                            {
                                string type = apiParameter.TypeScriptType();
#>
     * @param <#= TextConverter.CamelCase(apiParameter.Id) #>Param `<#= type #>`.
<#
                            }
                        }
                    }
                    if (action.ReturnType != null && action.ReturnType.Id != null)
                    {
#>
     * @returns `<#= TextConverter.PascalCase(action.ReturnType.Id) #>>`.
<#
                    }
#>
     */
    public <#= TextConverter.CamelCase(action.Id) #>(
<#
                    if (action.Parameters.AsEnumerable() != null && action.Parameters.AsEnumerable().Count() > 0)
                    {
                        ApiParameterInfo last = action.Parameters.AsEnumerable().Last();
                        foreach (ApiParameterInfo apiParameter in action.Parameters.AsEnumerable())
                        {
                            if (apiParameter.Id != null)
                            {
                                string type = apiParameter.TypeScriptType();
                                if (apiParameter.Equals(last))
                                {
#>
        <#= TextConverter.CamelCase(apiParameter.Id) #>Param: <#= type #>
<#
                                }
                                else
                                {
#>
        <#= TextConverter.CamelCase(apiParameter.Id) #>Param: <#= type #>,
<#
                                }
                            }
                        }
                    }

                    if (action.ReturnType != null && action.ReturnType.Id != null)
                    {
#>
    ): Observable<<#= TextConverter.PascalCase(action.ReturnType.Id) #>> {
<#
                    }
                    else
                    {
#>
    ) {
<#
                    }

                    switch (action.Type)
                    {
                        case "dataget": case "datalist":
#>
        return this._dataService.get(
<#
                            if (action.Parameters.AsEnumerable() != null && action.Parameters.AsEnumerable().Count() > 0)
                            {
#>
          `${this._<#= TextConverter.CamelCase(action.Id) #>Api}`,
          {
<#
                                ApiParameterInfo last = action.Parameters.AsEnumerable().Last();
                                foreach (ApiParameterInfo apiParameter in action.Parameters.AsEnumerable())
                                {
                                    if (apiParameter.Id != null)
                                    {
                                        if (apiParameter.Equals(last))
                                        {
#>
              <#= TextConverter.CamelCase(apiParameter.Id) #>: JSON.stringify(<#= TextConverter.CamelCase(apiParameter.Id) #>Param)
<#
                                        }
                                        else
                                        {
#>
              <#= TextConverter.CamelCase(apiParameter.Id) #>: JSON.stringify(<#= TextConverter.CamelCase(apiParameter.Id) #>Param),
<#
                                        }
                                    }
                                }
#>
          });
<#
                            }
                            else
                            {
#>
          `${this._<#= TextConverter.CamelCase(action.Id) #>Api}`,
          {});
<#
                            }

                        break;
                        case "datacreate": 
#>
        return this._dataService.post(
<#
                            if (action.Parameters.AsEnumerable() != null && action.Parameters.AsEnumerable().Count() > 0)
                            {
#>
          `${this._<#= TextConverter.CamelCase(action.Id) #>Api}`,
          {
<#
                                ApiParameterInfo last = action.Parameters.AsEnumerable().Last();
                                foreach (ApiParameterInfo apiParameter in action.Parameters.AsEnumerable())
                                {
                                    if (apiParameter.Id != null)
                                    {
                                        if (apiParameter.Equals(last))
                                        {
#>
              <#= TextConverter.CamelCase(apiParameter.Id) #>: <#= TextConverter.CamelCase(apiParameter.Id) #>Param
<#
                                        }
                                        else
                                        {
#>
              <#= TextConverter.CamelCase(apiParameter.Id) #>: <#= TextConverter.CamelCase(apiParameter.Id) #>Param,
<#
                                        }
                                    }
                                }
#>
          },
         {});
<#
                            }
                            else
                            {
#>
          `${this._<#= TextConverter.CamelCase(action.Id) #>Api}`,
          {},
          {});
<#
                            }

                        break;
                        case "dataupdate":
#>
        return this._dataService.put(
<#
                            if (action.Parameters.AsEnumerable() != null && action.Parameters.AsEnumerable().Count() > 0)
                            {
#>
          `${this._<#= TextConverter.CamelCase(action.Id) #>Api}`,
          {
<#
                                ApiParameterInfo last = action.Parameters.AsEnumerable().Last();
                                foreach (ApiParameterInfo apiParameter in action.Parameters.AsEnumerable())
                                {
                                    if (apiParameter.Id != null)
                                    {
                                        if (apiParameter.Equals(last))
                                        {
#>
              <#= TextConverter.CamelCase(apiParameter.Id) #>: <#= TextConverter.CamelCase(apiParameter.Id) #>Param
<#
                                        }
                                        else
                                        {
#>
              <#= TextConverter.CamelCase(apiParameter.Id) #>: <#= TextConverter.CamelCase(apiParameter.Id) #>Param,
<#
                                        }
                                    }
                                }
#>
          },
         {});
<#
                            }
                            else
                            {
#>
            `${this._<#= TextConverter.CamelCase(action.Id) #>Api}`,
            {},
            {});
<#
                            }

                        break;
                        case "datadelete":
#>
        return this._dataService.delete(
<#
                            if (action.Parameters.AsEnumerable() != null && action.Parameters.AsEnumerable().Count() > 0)
                            {
#>
            `${this._<#= TextConverter.CamelCase(action.Id) #>Api}`,
            {
<#
                                ApiParameterInfo last = action.Parameters.AsEnumerable().Last();
                                foreach (ApiParameterInfo apiParameter in action.Parameters.AsEnumerable())
                                {
                                    if (apiParameter.Id != null)
                                    {
                                        if (apiParameter.Equals(last))
                                        {
#>
               <#= TextConverter.CamelCase(apiParameter.Id) #>: JSON.stringify(<#= TextConverter.CamelCase(apiParameter.Id) #>Param)
<#	
                                        }
                                        else
                                        {
#>
               <#= TextConverter.CamelCase(apiParameter.Id) #>: JSON.stringify(<#= TextConverter.CamelCase(apiParameter.Id) #>Param),
<#
                                        }
                                    }
                                }
#>
            });
<#
                            }
                            else
                            {
#>
            `${this._<#= TextConverter.CamelCase(action.Id) #>Api}`,
            {});
<#
                            }

                        break;
                        default: break;
                    }
#>
    }
<#
                }
            }
        }
#>
}
<#
    }
#>